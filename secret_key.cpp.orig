#include "secret_key.h"
#include "qmutex.h"
#include "qfile.h"
#include "qtimer.h"
#include "qdatetime.h"
#include "qapplication.h"
#include "qmessagebox.h"
#include <QDebug>
#include <QTcpSocket>
//secret_key *secret_key::self = NULL;
//secret_key *secret_key::Instance()
//{
//    if (!self) {
//        QMutex mutex;
//        QMutexLocker locker(&mutex);
//        if (!self) {
//            self = new secret_key;
//        }
//    }

//    return self;
//}
secret_key::secret_key(QObject *parent) : QObject(parent)
{
    keyData = "";
    keyUseDate = false;
    keyDate = "2017-01-01";
    keyUseRun = false;
    keyRun = 1;
    keyUseCount = false;
    keyCount = 10;

    timer = new QTimer(this);
    timer->setInterval(1000);
    connect(timer, SIGNAL(timeout()), this, SLOT(checkTime()));
    startTime = QDateTime::currentDateTime();

}

secret_key::~secret_key()
{
    delete  timer;
}

void secret_key::checkTime()
{
    //找出当前时间与首次启动时间比较
    QDateTime now = QDateTime::currentDateTime();
    if (startTime.secsTo(now) >= (keyRun * 60)) {
        QMessageBox::critical(0, "错误", QStringLiteral("试运行时间已到,请联系供应商更新注册码!"));
        exit(0);
    }
}

QString secret_key::getXorEncryptDecrypt(const QString &data, char key)
{
    //采用异或加密,也可以自行更改算法
    QByteArray buffer = data.toLatin1();
    int size = buffer.size();
    for (int i = 0; i < size; i++) {
        buffer[i] = buffer.at(i) ^ key;
    }

    return QLatin1String(buffer);
}

bool secret_key::getNetTime()
{
    QTcpSocket *socket = new QTcpSocket();
    socket->connectToHost("210.72.145.44", 13);
    if (socket->waitForConnected())
    {
        if (socket->waitForReadyRead())
        {
            QString str(socket->readAll());
            str = str.trimmed();
            str = str.section(" ", 1, 2);
            qDebug()<<str;
            return true;
        }
        socket->close();
        delete socket;
         return true;
    }
    else  return false;

}

void secret_key::start()
{
    //判断密钥文件是否存在,不存在则从资源文件复制出来,同时需要设置文件写权限
    qDebug()<<qApp->applicationDirPath();
    QString keyName = qApp->applicationDirPath() + "/key.db";
    QFile keyFile(keyName);
    if (!keyFile.exists() || keyFile.size() == 0) {
//        QMessageBox::critical(0, "错误",  QStringLiteral("密钥文件丢失,请联系供应商!"));
        emit send_msg(QStringLiteral("密钥文件丢失,请联系供应商!"));



//        exit(0);
    }
    else{
        //读取密钥文件
        keyFile.open(QFile::ReadOnly);
    //    keyData = keyFile.readLine();
        keyData=QByteArray::fromBase64(keyFile.readLine());//使用base64解密
        keyFile.close();

        //将从注册码文件中的密文解密,与当前时间比较是否到期
        keyData = getXorEncryptDecrypt(keyData, 110);
        QStringList data = keyData.split("|");

        if (data.count() != 6) {
    //        QMessageBox::critical(0, "错误",  QStringLiteral("注册码文件已损坏,程序将自动关闭!"));
            emit send_msg(QStringLiteral("注册码文件已损坏,程序将自动关闭!"));
    //        exit(0);
        }

        keyUseDate = (data.at(0) == "1" ? true : false);
        keyDate = data.at(1);
        keyUseRun = (data.at(2) == "1" ? true : false);
        keyRun = data.at(3).toInt();
        keyUseCount = (data.at(4) == "1" ? true : false);
        keyCount = data.at(5).toInt();

        //如果启用了时间限制
        if (keyUseDate) {
            QString nowDate = QDate::currentDate().toString("yyyy-MM-dd");

            if (nowDate > keyDate) {
    //            QMessageBox::critical(0, "错误", QStringLiteral("软件已到期,请联系供应商更新注册码!"));
    //            exit(0);
                  emit send_msg(QStringLiteral("软件已到期,请联系供应商更新注册码!"));
            }
        }

        //如果启用了运行时间显示
        if (keyUseRun) {
            timer->start();
        }
    }

}

void secret_key::stop()
{
     timer->stop();
}

bool secret_key::checkCount(int count)
{
    if (keyUseCount) {
        if (count >= keyCount) {
//            QMessageBox::critical(0, "错误", QStringLiteral("设备数量超过限制,请联系供应商更新注册码!"));
             emit send_msg(QStringLiteral("设备数量超过限制,请联系供应商更新注册码!"));
            return false;
        }
    }

    return true;
}
